{
  "data-analyze": {
    "category": {
      "gremlin-analyze": "Gremlin Analysis",
      "algorithm-analyze": "Algorithm Analysis"
    },
    "manipulations": {
      "execution": "Execute",
      "favorite": "Favorite",
      "reset": "Reset"
    },
    "algorithm-list": {
      "title": "Algorithm Catalog",
      "loop-detection": "Loop Detection",
      "focus-detection": "Intersection Detection",
      "shortest-path": "Shortest Path",
      "shortest-path-all": "All Shortest Paths",
      "all-path": "All Paths",
      "neighbor-rank-recommendation": "Neighbor Rank Recommendation Algorithm",
      "model-similarity": "Model Similarity Algorithm",
      "real-time-recommendation": "Real-time Recommendation",
      "k-step-neighbor": "K-step Neighbor",
      "k-hop": "K-hop Algorithm",
      "custom-path": "Custom Path",
      "custom-intersection-detection": "Custom Intersection Detection",
      "radiographic-inspection": "Radiographic Inspection",
      "common-neighbor": "Common Neighbor",
      "weighted-shortest-path": "Weighted Shortest Path",
      "single-source-weighted-path": "Single Source Weighted Path",
      "jaccard-similarity": "Jaccard Similarity",
      "personal-rank-recommendation": "Personal Rank Recommendation Algorithm"
    },
    "algorithm-forms": {
      "loop-detection": {
        "options": {
          "source": "Source ID:",
          "direction": "Direction:",
          "max_depth": "Max Depth:",
          "label": "Edge Type:",
          "max_degree": "Max Degree:",
          "source_in_ring": "Source in Loop:",
          "limit": "Max Reachable Paths:",
          "capacity": "Max Visited Vertices:"
        },
        "pre-value": "All",
        "placeholder": {
          "input-source-id": "Please enter Source ID",
          "input-integer": "Please enter an integer greater than or equal to 0",
          "input-positive-integer": "Please enter a positive integer",
          "no-edge-types": "No edge types"
        },
        "hint": {
          "max-depth": "To ensure performance, it is recommended not to exceed 10 steps, 5 steps recommended",
          "skip-degree": "Enter the minimum number of edges for vertices to skip during the query, i.e., skip the vertex when the number of edges of the vertex exceeds the super vertex degree, which can be used to avoid super vertices"
        },
        "validations": {
          "no-empty": "This field cannot be empty",
          "integer-only": "Please enter an integer greater than or equal to 0",
          "postive-integer-only": "Please enter a positive integer"
        }
      },
      "focus-detection": {
        "options": {
          "source": "Source ID:",
          "target": "Target ID:",
          "direction": "Direction:",
          "max_depth": "Max Depth:",
          "label": "Edge Type:",
          "max_degree": "Max Degree:",
          "limit": "Max Visited Vertices:",
          "capacity": "Max Intersection Return:"
        },
        "pre-value": "All",
        "placeholder": {
          "input-source-id": "Please enter Source ID",
          "input-target-id": "Please enter Target ID",
          "input-integer": "Please enter an integer greater than or equal to 0",
          "input-positive-integer": "Please enter a positive integer",
          "no-edge-types": "No edge types"
        },
        "hint": {
          "max-depth": "To ensure performance, it is recommended not to exceed 10 steps, 5 steps recommended",
          "skip-degree": "Enter the minimum number of edges for vertices to skip during the query, i.e., skip the vertex when the number of edges of the vertex exceeds the super vertex degree, which can be used to avoid super vertices"
        },
        "validations": {
          "no-empty": "This field cannot be empty",
          "integer-only": "Please enter an integer greater than or equal to 0",
          "postive-integer-only": "Please enter a positive integer"
        }
      },
      "shortest-path": {
        "options": {
          "source": "Source ID:",
          "target": "Target ID:",
          "direction": "Direction:",
          "max_depth": "Max Depth:",
          "maxDepth": "Max Depth:",
          "label": "Edge Type:",
          "max_degree": "Max Degree:",
          "maxDegree": "Max Degree:",
          "skip_degree": "Super Vertex Degree:",
          "skipDegree": "Super Vertex Degree:",
          "capacity": "Max Visited Vertices:"
        },
        "pre-value": "All",
        "placeholder": {
          "input-source-id": "Please enter Source ID",
          "input-target-id": "Please enter Target ID",
          "input-integer": "Please enter an integer greater than or equal to 0",
          "input-positive-integer": "Please enter a positive integer",
          "no-edge-types": "No edge types"
        },
        "hint": {
          "max-depth": "To ensure performance, it is recommended not to exceed 10 steps, 5 steps recommended",
          "skip-degree": "Enter the minimum number of edges for vertices to skip during the query, i.e., skip the vertex when the number of edges of the vertex exceeds the super vertex degree, which can be used to avoid super vertices"
        },
        "validations": {
          "no-empty": "This field cannot be empty",
          "integer-only": "Please enter an integer greater than or equal to 0",
          "postive-integer-only": "Please enter a positive integer"
        }
      },
      "shortest-path-all": {
        "options": {
          "source": "Source ID:",
          "target": "Target ID:",
          "direction": "Direction:",
          "max_depth": "Max Depth:",
          "label": "Edge Type:",
          "max_degree": "Max Degree:",
          "capacity": "Max Visited Vertices:",
          "skip_degree": "Super Vertex Degree:"
        },
        "pre-value": "All",
        "placeholder": {
          "input-source-id": "Please enter Source ID",
          "input-target-id": "Please enter Target ID",
          "input-integer": "Please enter an integer greater than or equal to 0",
          "input-positive-integer": "Please enter a positive integer",
          "no-edge-types": "No edge types"
        },
        "hint": {
          "max-depth": "To ensure performance, it is recommended not to exceed 10 steps, 5 steps recommended",
          "skip-degree": "Enter the minimum number of edges for vertices to skip during the query, i.e., skip the vertex when the number of edges of the vertex exceeds the super vertex degree, which can be used to avoid super vertices"
        },
        "validations": {
          "no-empty": "This field cannot be empty",
          "integer-only": "Please enter an integer greater than or equal to 0",
          "postive-integer-only": "Please enter a positive integer"
        }
      },
      "all-path": {
        "options": {
          "source": "Source ID:",
          "target": "Target ID:",
          "direction": "Direction:",
          "max_depth": "Max Depth:",
          "label": "Edge Type:",
          "max_degree": "Max Degree:",
          "capacity": "Max Visited Vertices:",
          "limit": "Max Path Return:"
        },
        "pre-value": "All",
        "placeholder": {
          "input-source-id": "Please enter Source ID",
          "input-target-id": "Please enter Target ID",
          "input-integer": "Please enter an integer greater than or equal to 0",
          "input-positive-integer": "Please enter a positive integer",
          "no-edge-types": "No edge types"
        },
        "hint": {
          "max-depth": "To ensure performance, it is recommended not to exceed 10 steps, 5 steps recommended",
          "skip-degree": "Enter the minimum number of edges for vertices to skip during the query, i.e., skip the vertex when the number of edges of the vertex exceeds the super vertex degree, which can be used to avoid super vertices"
        },
        "validations": {
          "no-empty": "This field cannot be empty",
          "integer-only": "Please enter an integer greater than or equal to 0",
          "postive-integer-only": "Please enter a positive integer"
        }
      },
      "model-similarity": {
        "options": {
          "method": "Starting Point Selection Method:",
          "source": "Source ID:",
          "vertex-type": "Vertex Type",
          "vertex-property": "Vertex Property",
          "direction": "Direction:",
          "least_neighbor": "Minimum Neighbors:",
          "similarity": "Similarity:",
          "label": "Edge Type:",
          "max_similar": "Top Similarity:",
          "least_similar": "Minimum Similar Points:",
          "property_filter": "Property Filter:",
          "least_property_number": "Minimum Property Value Number:",
          "max_degree": "Max Degree:",
          "capacity": "Max Visited Vertices:",
          "skip_degree": "Max Returned Vertices:",
          "limit": "Max Result Return:",
          "return_common_connection": "Return Common Connection Points:",
          "return_complete_info": "Return Complete Vertex Information:"
        },
        "radio-value": {
          "specific-id": "Specific ID",
          "filtered-type-property": "Filtered Type Property"
        },
        "placeholder": {
          "input-source-id": "Please enter Source ID",
          "input-vertex-type": "Please select a Vertex Type",
          "input-vertex-property": "Please select a Vertex Property",
          "input-integer": "Please enter an integer greater than or equal to 0",
          "input-positive-integer": "Please enter a positive integer",
          "input-integer-gt-1": "Please enter an integer greater than 1",
          "input-filtered-property": "Please select a property to filter",
          "no-properties": "No properties",
          "no-vertex-type": "No Vertex Type"
        },
        "hint": {
          "least_property_number": "Property filter and minimum property value number need to be used together; after setting, the effect is: when the value of a certain property of the source point and all its shuttle similar points is greater than or equal to the minimum property value number, the source point and its shuttle similar points will be returned",
          "least_neighbor": "If the number of neighbors is less than the current set value, it is considered that the source point has no shuttle similar points",
          "similarity": "The proportion of the number of common neighbors between the source point and \"shuttle similar points\" to the total number of neighbors of the source point",
          "max_similar": "Return the top similarity shuttle similar points of the source point, 0 means all",
          "return_common_connection": "Whether to return the intermediate points commonly associated with the source point and its \"shuttle similar points\""
        },
        "validations": {
          "no-empty": "This field cannot be empty",
          "no-edge-typs": "No edge types",
          "integer-only": "Please enter an integer greater than or equal to 0",
          "positive-integer-only": "Please enter a positive integer",
          "integer-gt-1": "Please enter an integer greater than 1"
        },
        "pre-value": "All"
      },
      "neighbor-rank": {
        "options": {
          "source": "Source ID:",
          "alpha": "Alpha",
          "direction": "Direction:",
          "capacity": "Max Visited Vertices:",
          "label": "Edge Type:",
          "degree": "Max Degree:",
          "top": "Top N Weights per Layer:"
        },
        "placeholder": {
          "input-source-id": "Please enter Source ID",
          "input-integer": "Please enter an integer greater than or equal to 0",
          "input-positive-integer": "Please enter a positive integer",
          "range": "Range (0-1]"
        },
        "hint": {
          "top": "Only retain the top N results with the highest weight in each layer in the results"
        },
        "validations": {
          "no-empty": "This field cannot be empty",
          "no-edge-typs": "No edge types",
          "range": "Please enter a value greater than 0 and less than or equal to 1",
          "integer-only": "Please enter an integer greater than or equal to 0",
          "postive-integer-only": "Please enter a positive integer",
          "input-chars": "Rules cannot be duplicated"
        },
        "pre-value": "All",
        "add-new-rule": "Add Rule"
      }
    },
    "exec-logs": {
      "table-title": {
        "time": "Time",
        "type": "Execution Type",
        "content": "Execution Content",
        "status": "Status",
        "duration": "Duration",
        "manipulation": "Operation"
      },
      "type": {
        "GREMLIN": "GREMLIN Query",
        "GREMLIN_ASYNC": "GREMLIN Task",
        "ALGORITHM": "Algorithm Query"
      },
      "status": {
        "success": "Success",
        "async-success": "Submission Successful",
        "running": "Running",
        "failed": "Failed",
        "async-failed": "Submission Failed"
      }
    }
  }
}
